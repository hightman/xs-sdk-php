<?php
require_once dirname(__FILE__) . '/../../lib/XSSearch.class.php';

/**
 * Test class for XSSearch
 * Generated by PHPUnit on 2011-09-15 at 19:29:49.
 */
class XSSearchTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var XS
	 */
	protected static $xs;

	public static function setUpBeforeClass(): void
	{
		$data = array(
			array(
				'pid' => 3,
				'subject' => '关于 xunsearch 的 DEMO 项目测试',
				'message' => '项目测试是一个很有意思的行为！',
				'chrono' => 214336158,
				'other' => 'master',
				'lon' => 116.451,
				'lat' => 39.94,
				'null' => '',	// null term: 0, 3
			),
			array(
				'pid' => 11,
				'subject' => '测试第二篇',
				'message' => '这里是第二篇文章的内容',
				'chrono' => 1314336168,
				'other' => 'slave',
				'lon' => 117.3,
				'lat' => 39.94,
				// null term: 2, 3, 1
			),
			array(
				'pid' => 21,
				'subject' => '项目测试第三篇',
				'message' => '俗话说，无三不成礼，所以就有了第三篇',
				'chrono' => 314336178,
				'other' => 'master',
				'lon' => 116.4,
				'lat' => 39.94,
				// null term: 0, 1
			)
		);

		// create object
		self::$xs = new XS(end($GLOBALS['fixIniData']));
		$index = self::$xs->index;
		$index->clean();

		// create testing data
		$doc = new XSDocument('utf-8');
		foreach ($data as $tmp) {
			$doc->setFields(null);
			$doc->setFields($tmp);
			$doc->addTerm('null', $doc->pid % 3);
			$doc->addTerm('null', $doc->pid % 4);
			$doc->addTerm('null', $doc->pid % 5);
			$index->add($doc);
		}
		$index->addSynonym('project', '项目');
		$index->flushIndex();

		// create another db
		$index->setDb('db2');
		$index->clean();
		foreach ($data as $tmp) {
			$tmp['pid'] += 1000;
			$doc->setFields(null);
			$doc->setFields($tmp);
			$index->add($doc);
		}
		// create synonyms on db2
		$synonyms = array(
			'test' => '测试',
			'hello world' => '有意思',
			'迅搜' => 'xunsearch',
		);
		$index->openBuffer();
		foreach ($synonyms as $raw => $syn) {
			$index->addSynonym($raw, $syn);
		}
		$index->addSynonym('test', 'quiz');
		$index->closeBuffer();

		// flush index & logging
		$index->flushIndex();
		sleep(2);
		$index->flushLogging();
		sleep(2);
	}

	public static function tearDownAfterClass(): void
	{
		// clean testing data
		self::$xs->index->reopen(true);
		self::$xs->index->clean();
		self::$xs->index->setDb('db2');
		self::$xs->index->clean();
		self::$xs->index->setDb(XSSearch::LOG_DB);
		self::$xs->index->clean();
		self::$xs = null;
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		self::$xs->search->setCharset('UTF8')->setFuzzy(false)->reopen(true);
		self::$xs->search->setDb(null)->setTimeout(30);
		self::$xs->index->setDb('db');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown(): void
	{

	}

	public function testFacets()
	{
		$search = self::$xs->search;
		$docs = $search->setQuery('subject:测试')->setFacets(array('other', 'null'))->search();

		$this->assertEquals(3, count($docs));
		$this->assertEquals('测试第二篇', $docs[0]->subject);

		$facets = $search->getFacets('other');
		$this->assertEquals($facets['master'], 2);
		$this->assertEquals($facets['slave'], 1);

		// 0,3  2,3,1, 0,1
		$facets = $search->getFacets('null');
		$this->assertEquals($facets['0'], 2);
		$this->assertEquals($facets['1'], 2);
		$this->assertEquals($facets['2'], 1);
		$this->assertEquals($facets['3'], 2);

	}

	public function testCharset()
	{
		$xs = self::$xs;
		$search = $xs->search;
		$query = 'subject:测试';

		$docs = $search->search($query);
		$this->assertEquals(3, count($docs));
		$this->assertEquals('测试第二篇', $docs[0]->subject);

		$this->assertEquals('GBK', $xs->getDefaultCharset());
		$search->setCharset($xs->getDefaultCharset());
		$this->assertEquals(0, $search->count($query));

		$docs = $search->search(XS::convert($query, 'GBK', 'UTF-8'));
		$this->assertEquals(3, count($docs));
		$this->assertEquals(XS::convert('测试第二篇', 'GBK', 'UTF-8'), $docs[0]->subject);
	}

	public function testFuzzy()
	{
		$search = self::$xs->search;
		$this->assertEquals(2, $search->count('subject:项目测试')); // default: non-fuzzy
		$this->assertEquals(3, $search->setFuzzy()->count('subject:项目测试'));
	}

	/**
	 * @dataProvider queryProvider
	 */
	public function testQuery($raw, $parsed)
	{
		$search = self::$xs->search;
		$this->assertEquals($parsed, $search->setQuery($raw)->getQuery());
	}

	public function queryProvider()
	{
		return array(
			array('DEMO', 'Query(demo@1)'),
			array('测试', 'Query(测试@1)'),
			array('subject:测试', 'Query(B测试@1)'),
			array('subject:项目测试', 'Query((B项目@1 AND B测试@2))'),
			array('subject2:测试', 'Query((Zsubject2@1 AND 测试@2))'),
			array('subject2:Hello', 'Query((subject2@1 PHRASE 2 hello@2))'),
			array('项目管理制度', 'Query((项目@1 AND (管理制度@2 SYNONYM (管理@79 AND 制度@80))))'),
			array('subject:项目管理制度', 'Query((B项目@1 AND (B管理制度@2 SYNONYM (B管理@79 AND B制度@80))))'),
			array('几句说明', 'Query((几句@1 AND 说明@2))'),
			array('说明几句', 'Query((说明@1 AND 几句@2))'),
			array('pid:1 AND pid:2', 'Query((0 * A1 AND 0 * A2))'),
			array('(pid:1 AND pid:2) OR pid:3', 'Query(((0 * A1 AND 0 * A2) OR 0 * A3))'),
		);
	}

	public function testSetDocOrder()
	{
		$search = self::$xs->search;
		$docs = $search->setDocOrder(true)->setLimit(1)->search('other:master');
		$this->assertEquals(3, $docs[0]->pid);
		$docs = $search->setDocOrder()->setLimit(1)->search('other:master');
		$this->assertEquals(21, $docs[0]->pid);
	}

	public function testSetSort()
	{
		$search = self::$xs->search;

		// pid string
		$docs = $search->setSort('pid')->setLimit(1)->search('subject:测试');
		$this->assertEquals(3, $docs[0]->pid);

		$docs = $search->setSort('pid', true)->setLimit(1)->search('subject:测试');
		$this->assertEquals(11, $docs[0]->pid);

		// chrono numeric
		$docs = $search->setSort('chrono')->setLimit(1)->search('subject:测试');
		$this->assertEquals(11, $docs[0]->pid);

		$docs = $search->setSort('chrono', true)->setLimit(1)->search('subject:测试');
		$this->assertEquals(3, $docs[0]->pid);

		$search->setSort(null);
	}

	public function testSetMultiSort()
	{
		$search = self::$xs->search;

		// pid string
		$docs = $search->setMultiSort(array('pid'))->setLimit(1)->search('subject:测试');
		$this->assertEquals(3, $docs[0]->pid);

		$docs = $search->setMultiSort(array('pid' => true))->setLimit(1)->search('subject:测试');
		$this->assertEquals(11, $docs[0]->pid);

		// other (desc) + chrono (desc)
		$docs = $search->setMultiSort(array('other', 'chrono'))->setLimit(1)->search('subject:测试');
		$this->assertEquals(11, $docs[0]->pid);

		// other (asc) + chrono(desc)
		$docs = $search->setMultiSort(array('other' => true, 'chrono'))->setLimit(1)->search('subject:测试');
		$this->assertEquals(21, $docs[0]->pid);

		// other (asc) + chrono(asc)
		$docs = $search->setMultiSort(array('other' => true, 'chrono' => true))->setLimit(1)->search('subject:测试');
		$this->assertEquals(3, $docs[0]->pid);
	}

	public function testSetGeodistSort()
	{
		$search = self::$xs->search;

		// exception fields
		try {
			$search->setGeodistSort('lat');
		} catch (Exception $e) {

		}
		$this->assertInstanceOf('XSException', $e);
		$this->assertStringContainsString('should be an array', $e->getMessage());
		try {
			$search->setGeodistSort(array('pid' => 1, 'lat' => 33.1));
		} catch (Exception $e) {

		}
		$this->assertInstanceOf('XSException', $e);
		$this->assertStringContainsString('shoud be numeric', $e->getMessage());

		// normal test
		$geo = array('lon' => 116.45, 'lat' => '39.96');
		$docs = $search->setGeodistSort($geo)->setLimit(1)->search('subject:测试');
		$this->assertEquals(3, $docs[0]->pid);
		$docs = $search->setGeodistSort($geo, true)->setLimit(1)->search('subject:测试');
		$this->assertEquals(11, $docs[0]->pid);
	}

	public function testCollapse()
	{
		$search = self::$xs->search;
		$docs = $search->setCollapse('other')->search('subject:测试');
		$this->assertEquals(2, count($docs));
		$this->assertEquals(0, $docs[0]->ccount());
		$this->assertEquals(1, $docs[1]->ccount());

		$docs = $search->setCollapse('other', 2)->search('subject:测试');
		$this->assertEquals(3, count($docs));
		$this->assertEquals(0, $docs[0]->ccount());
		$this->assertEquals(0, $docs[1]->ccount());
	}

	public function testRange()
	{
		$search = self::$xs->search;
		$query = 'subject:测试';

		// string
		$docs = $search->setQuery($query)->addRange('pid', 20, 30)->search();
		$this->assertEquals(2, count($docs));
		$docs = $search->setQuery($query)->addRange('pid', null, 30)->search();
		$this->assertEquals(3, count($docs));
		$docs = $search->setQuery($query)->addRange('pid', 12, null)->search();
		$this->assertEquals(2, count($docs));

		// fast search (non-effects)
		$docs = $search->setQuery($query)->addRange('pid', 12, null)->search('subject:测试');
		$this->assertEquals(3, count($docs));

		// numeric
		$docs = $search->setQuery($query)->addRange('chrono', 214336157, 1314336168)->search();
		$this->assertEquals(3, count($docs));
		$docs = $search->setQuery($query)->addRange('chrono', null, 314336178)->search();
		$this->assertEquals(2, count($docs));
		$docs = $search->setQuery($query)->addRange('chrono', 214336159, null)->search();
		$this->assertEquals(2, count($docs));
	}

	public function testWeight()
	{
		$search = self::$xs->search;
		$query = 'subject:测试';

		$docs = $search->setQuery($query)->search();
		$this->assertEquals(11, $docs[0]->pid);

		$docs = $search->setQuery($query)->addWeight('subject', 'demo')->search();
		$this->assertEquals(3, $docs[0]->pid);

		$docs = $search->setQuery($query)->addWeight('subject', 'demo')->addWeight(null, '俗话', 2)->search();
		$this->assertEquals(21, $docs[0]->pid);
	}

	public function testLimit()
	{
		$search = self::$xs->search;
		$search->query = 'subject:测试';

		$docs = $search->search();
		$this->assertEquals(3, count($docs));

		$docs = $search->setLimit(2)->search();
		$this->assertEquals(2, count($docs));

		$docs = $search->setLimit(1)->search();
		$this->assertEquals(11, $docs[0]->pid);
		$docs = $search->setLimit(1, 1)->search();
		$this->assertEquals(21, $docs[0]->pid);
		$docs = $search->setLimit(1, 2)->search();
		$this->assertEquals(3, $docs[0]->pid);
	}

	public function testMultiDb()
	{
		$search = self::$xs->search;
		$search->setDb('db2');

		$docs = $search->search('subject:测试');
		$this->assertEquals(3, $search->dbTotal);
		$this->assertEquals(11 + 1000, $docs[0]->pid);

		$search->setDb(null);
		$docs = $search->search('subject:测试');
		$this->assertEquals(11, $docs[0]->pid);
		$this->assertEquals(3, $search->dbTotal);

		$search->addDb('db2');
		$this->assertEquals(6, $search->dbTotal);
		$docs = $search->search('subject:测试');
		$this->assertEquals(6, count($docs));
		$search->setDb(null);
	}

	public function testTerms()
	{
		$search = self::$xs->search;

		$search->query = 'subject:项目测试 working';
		$this->assertEquals(array('项目', '测试', 'working'), $search->terms());
		$this->assertEquals(array('项目', 'working'), $search->terms('项目working'));

		$this->assertEquals(array('项目', 'working'), $search->terms('项目working -测试'));
		$search->setQuery('项目working')->addWeight('subject', '测试');
		$this->assertEquals(array('项目', 'working'), $search->terms());
	}

	public function testCount()
	{
		$search = self::$xs->search;

		$this->assertEquals(3, $search->count('subject:测试'));
		$this->assertEquals(1, $search->count('测试'));
		$search->query = '内容';
		$this->assertEquals(1, $search->count());
	}

	public function testSearch()
	{
		$search = self::$xs->search;

		$docs = $search->search('subject:DEMO');
		$this->assertEquals(1, count($docs));
		$this->assertEquals(3, $docs[0]->pid);
	}

	public function testHotQuery()
	{
		$search = self::$xs->search;
	}

	public function testEmptyQuery()
	{
		$search = self::$xs->search;

		$empty = $search->setQuery(null)->getQuery();
		$this->assertEquals($empty, 'Query(<alldocuments>)');
		$this->assertEquals(array(), $search->terms());
		$this->assertEquals(3, count($search->search()));

		$docs = $search->setSort('chrono')->search();
		$this->assertEquals('11', $docs[0]->pid);
		$docs = $search->setSort('chrono', true)->search();
		$this->assertEquals('3', $docs[0]->pid);

		$search->addDb('db2');
		$this->assertEquals(6, $search->setQuery(null)->count());
		$search->setDb(null);
	}

	public function testRelatedQuery()
	{
		$search = self::$xs->search;
		$search->setQuery('项目测试')->search();
		$search->getRelatedQuery();
		$search->xs->index->reopen(true)->flushLogging();
		sleep(3);
		$search->reopen(true);

		$search->setQuery('测试')->search();
		$words = $search->getRelatedQuery();
		$this->assertEquals('项目测试', $words[0]);

		$words = $search->getRelatedQuery('项目');
		$this->assertEquals('项目测试', $words[0]);
	}

	public function testExpandedQuery()
	{
		$search = self::$xs->search;
		$this->assertEquals(array('测试'), $search->getExpandedQuery('c'));
		$this->assertEquals(array('测试'), $search->getExpandedQuery('cs'));
		$this->assertEquals(array('测试'), $search->getExpandedQuery('ces'));
		$this->assertEquals(array('测试'), $search->getExpandedQuery('测'));
	}

	public function testCorrectedQuery()
	{
		$search = self::$xs->search;
		$this->assertEquals(array('测试'), $search->getCorrectedQuery('cs'));
		$this->assertEquals(array('测试'), $search->getCorrectedQuery('策试'));
		$this->assertEquals(array('测试'), $search->getCorrectedQuery('ceshi'));
	}

	public function testHightlight()
	{
		$search = self::$xs->search;
		$search->setQuery('subject:测试 OR DEMO')->search();

		$this->assertEquals('<em>测试</em>一下 <em>DEMO</em>', $search->highlight('测试一下 DEMO'));
		$this->assertEquals('评<em>测试</em>试一下', $search->highlight('评测试试一下'));
	}

	public function testAddSearchLog()
	{
		$search = self::$xs->search;

		$search->addSearchLog('php 教程');
		$search->addSearchLog('php 教学');
		$search->addSearchLog('php 教导', 999);
		$search->addSearchLog('php 教程');
		self::$xs->index->reopen(true)->flushLogging();
		sleep(2);
		self::$xs->setScheme(XSFieldScheme::logger());
		$search->reopen(true);
		$docs = $search->setDb(XSSearch::LOG_DB)->search('php');
		$search->setDb(null);
		self::$xs->restoreScheme();
		$this->assertEquals($docs[0]->total, 999);
		$this->assertEquals($docs[1]->total, 2);
		$this->assertEquals($docs[2]->total, 1);
	}

	public function testGetAllSynonyms()
	{
		$search = self::$xs->search; /* @var $search XSSearch */
		$synonyms = $search->getAllSynonyms(0, 0, true);
		$this->assertEquals(2, count($synonyms));
		$this->assertEquals('项目', $synonyms['Zproject'][0]);
		$this->assertEquals('项目', $synonyms['project'][0]);

		$search->addDb('db2');
		$synonyms = $search->getAllSynonyms(2);
		$this->assertEquals(2, count($synonyms));
		$synonyms = $search->getAllSynonyms(2, 3);
		$this->assertEquals(1, count($synonyms));
		$synonyms = $search->getAllSynonyms(2, 4);
		$this->assertEquals(0, count($synonyms));

		$synonyms = $search->getAllSynonyms();
		$this->assertEquals('项目', $synonyms['project'][0]);
		$this->assertEquals('有意思', $synonyms['hello world'][0]);
		$this->assertEquals(4, count($synonyms));
		$search->setDb(null);
	}

	public function testSearchSynonyms()
	{
		$search = self::$xs->search; /* @var $search XSSearch */
		$search->setDb('db2');

		// test fuzzy multi query
		$search->setFuzzy();
		$this->testQuery('中华人民共和国', 'Query((中华人民共和国@1 SYNONYM (中华@78 OR 人民@79 OR 共和国@80)))');
		$this->testQuery('"中华人民共和国"', 'Query(中华人民共和国@1)');
		$search->setFuzzy(false);

		// test without synonyms
		$queries = array(
			'项目test' => 'Query((项目@1 AND Ztest@2))',
			'俗话 subject:(项目 test)' => 'Query((俗话@1 AND (B项目@2 AND ZBtest@3)))',
			'爱写hello world ok' => 'Query((爱写@1 AND (Zhello@2 AND Zworld@3 AND Zok@4)))',
			'demo 迅搜' => 'Query((Zdemo@1 AND 迅搜@2))',
			'"demo 迅搜"' => 'Query((demo@1 PHRASE 2 迅搜@2))',
			'testing' => 'Query(Ztest@1)',
		);
		foreach ($queries as $raw => $expect) {
			$this->testQuery($raw, $expect);
		}

		// test synonym query
		$search->setAutoSynonyms();
		$queries = array(
			'项目test' => 'Query((项目@1 AND (Ztest@2 SYNONYM quiz@68 SYNONYM 测试@69)))',
			'俗话 subject:(项目 test)' => 'Query((俗话@1 AND (B项目@2 AND (ZBtest@3 SYNONYM Bquiz@69 SYNONYM B测试@70))))',
			'爱写hello world' => 'Query((爱写@1 AND ((Zhello@2 AND Zworld@3) SYNONYM 有意思@90)))',
			'demo 迅搜' => 'Query((Zdemo@1 AND (迅搜@2 SYNONYM xunsearch@79)))',
			'"demo 迅搜"' => 'Query((demo@1 PHRASE 2 迅搜@2))',
			'testing' => 'Query((Ztest@1 SYNONYM Zquiz@67 SYNONYM 测试@68))',
		);
		foreach ($queries as $raw => $expect) {
			$this->testQuery($raw, $expect);
		}

		// test search result & highlight
		$docs = $search->setAutoSynonyms(false)->search('项目test');
		$this->assertEquals(0, count($docs));
		$docs = $search->setAutoSynonyms(true)->search('subject:项目test');
		$this->assertEquals(2, count($docs));

		// search with query
		$docs = $search->setAutoSynonyms(true)->setFuzzy(true)->search('项目testing');
		$this->assertEquals(1, count($docs));
		$this->assertEquals('test和<em>Quiz</em>以及<em>测试</em>', $search->highlight('test和Quiz以及测试'));

		// default search
		$docs = $search->setAutoSynonyms(true)->setFuzzy(false)->setQuery('hello world 项目')->search();
		$this->assertEquals(1, count($docs));
		$this->assertEquals('<em>有意思</em>的<em>项目</em>', $search->highlight('有意思的项目'));

		// restore db
		$search->setDb(null);
	}

	public function testMatchedTerm()
	{
		$search = self::$xs->search; /* @var $search XSSearch */
		// without mathced
		$docs = $search->setFuzzy()->setSort('chrono')
				->setQuery('subject:项目测试')->setLimit(1)->search();
		try {
			$docs[0]->matched();
		} catch (Exception $e) {

		}
		$this->assertInstanceOf('XSException', $e);
		$this->assertStringContainsString('undefined method', $e->getMessage());
		// with matched
		$docs = $search->setFuzzy()->setSort('chrono')->setRequireMatchedTerm()
				->setQuery('subject:项目测试')->setLimit(1)->search();
		$terms = $docs[0]->matched();
		$this->assertIsArray($terms);
		$this->assertEquals(1, count($terms));
		$this->assertEquals('测试', $terms[0]);
	}

	public function testSetDb()
	{
		$index = self::$xs->index;
		$index->clean();
		sleep(1);

		$search = self::$xs->search;
		try {
			$e1 = null;
			$search->setDb(null);
		} catch (XSException $e1) {
			// reopen error
		}
		$search->reopen(true);
		try {
			$e2 = null;
			$search->setDb('db');
		} catch (XSException $e2) {
			// fixed not exists
		}
		$this->assertInstanceOf('XSException', $e1);
		$this->assertEquals(XS_CMD_ERR_XAPIAN, $e1->getCode());
		$this->assertNull($e2);
		//$this->assertInstanceOf('XSException', $e2);
		//$this->assertEquals(XS_CMD_ERR_XAPIAN, $e2->getCode());
	}

	public function testCustomDict()
	{
		$index = self::$xs->index;
		$search = self::$xs->search;

		// without custom dict
		$index->setCustomDict('');
		$query = $search->reopen(true)->getQuery('去测测看');
		$this->assertEquals('Query((去@1 AND 测测@2 AND 看@3))', $query);

		// with custom dict
		$dict = <<<EOF
搜一下	1.0		1.1		vn
测测看	2.0		2.1		vn
EOF;
		$index->setCustomDict($dict);
		$query = $search->reopen(true)->getQuery('去测测看');
		$this->assertEquals('Query((去@1 AND (测测看@2 SYNONYM (测测@79 AND 测看@80))))', $query);
	}

	public function testScwsMulti()
	{
		$search = self::$xs->search;
		// default scws
		$this->assertEquals(array('管理制度', '管理', '制度'), $search->terms('管理制度'));
		// multi = 0
		$search->setScwsMulti(0);
		$this->assertEquals(array('管理制度'), $search->terms('管理制度'));
		// multi = 2
		$search->setScwsMulti(2);
		$this->assertEquals(array('管理制度', '管理', '理制', '制度'), $search->terms('管理制度'));
	}

	public function testQueryTerm()
	{
		$search = self::$xs->search;
		// add term
		$search->setQuery('test')->addQueryTerm('subject', '管理+制度', XS_CMD_QUERY_OP_XOR);
		$this->assertEquals('Query((Ztest@1 XOR B管理+制度))', $search->query);
		$search->setQuery('test')->addQueryTerm('subject', '管理+制度', XS_CMD_QUERY_OP_AND, 0.5);
		$this->assertEquals('Query((Ztest@1 AND 0.5 * B管理+制度))', $search->query);
		// add terms
		$search->setFuzzy(true)->setQuery('test')->addQueryTerm('subject', array('管理+制度', '测测看', '对不对'), XS_CMD_QUERY_OP_AND_MAYBE);
		$this->assertEquals('Query((Ztest@1 AND_MAYBE (B管理+制度 OR B测测看 OR B对不对)))', $search->query);
		$search->setFuzzy(false)->setQuery('test')->addQueryTerm('subject', array('管理+制度', '测测看', '对不对'), XS_CMD_QUERY_OP_AND_MAYBE, 0.1);
		$this->assertEquals('Query((Ztest@1 AND_MAYBE 0.10000000000000000555 * (B管理+制度 AND B测测看 AND B对不对)))', $search->query);
		// set fuzzy = true
		$search->setQuery(null)->setFuzzy(true)->addQueryString('');
		$search->addQueryTerm('subject', array('管理+制度', '测测看', '对不对'));
		$this->assertEquals('Query((B管理+制度 OR B测测看 OR B对不对))', $search->query);
		// set fuzzy = false
		$search->setQuery(null)->setFuzzy(false)->addQueryString('');
		$search->addQueryTerm('subject', array('管理+制度', '测测看', '对不对'));
		$this->assertEquals('Query((B管理+制度 AND B测测看 AND B对不对))', $search->query);
	}
}
