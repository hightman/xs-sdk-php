<?php
require_once dirname(__FILE__) . '/../../lib/XS.class.php';

/**
 * Test class for XS
 * Generated by PHPUnit on 2011-07-23 at 20:26:04.
 */
class XSTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var XS
	 */
	protected $xs1, $xs2;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		global $fixIniData;
		reset($fixIniData);
		$this->xs1 = new XS(key($fixIniData));
		$this->xs2 = new Xs(end($fixIniData));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown(): void
	{
		
	}

	public static function setUpBeforeClass(): void
	{
		global $fixIniData;
		foreach ($fixIniData as $key => $value) {
			file_put_contents($key, $value);
		}
	}

	public static function tearDownAfterClass(): void
	{
		global $fixIniData;
		foreach ($fixIniData as $key => $value) {
			unlink($key);
		}
	}

	public function testGetScheme()
	{
		$this->assertEquals($this->xs1->scheme, $this->xs1->getScheme());
		$this->assertEquals($this->xs2->scheme, $this->xs2->getScheme());
		$this->assertInstanceOf('XSFieldScheme', $this->xs1->scheme);
		$this->assertInstanceOf('XSFieldScheme', $this->xs2->scheme);
	}

	public function testSetScheme()
	{
		try {
			// check invalid scheme
			$scheme = new XSFieldScheme;
			$this->xs2->setScheme($scheme);
		} catch (XSException $e) {
			$this->assertEquals('Missing field of type ID', $e->getMessage());
			$this->assertEquals(0, $e->getCode());
		}

		// test valid scheme
		$scheme1 = $this->xs1->scheme;
		$this->xs2->scheme = $scheme1;
		$this->assertEquals($this->xs1->getScheme(), $this->xs2->getScheme());
	}

	public function testRestoreScheme()
	{
		$scheme1 = $this->xs1->scheme;
		$this->xs1->scheme = $this->xs2->scheme;
		$this->assertEquals($this->xs1->getScheme(), $this->xs2->getScheme());
		$this->xs1->restoreScheme();
		$this->assertEquals($scheme1, $this->xs1->getScheme());
	}

	public function testGetName()
	{
		$this->assertEquals('xs_test1', $this->xs1->getName());
		$this->assertEquals('test2', $this->xs2->name);
	}

	public function testGetDefaultCharset()
	{
		$this->assertEquals('UTF-8', $this->xs1->getDefaultCharset());
		$this->assertEquals('GBK', $this->xs2->defaultCharset);
	}

	public function testGetIndex()
	{
		$this->assertInstanceOf('XSIndex', $this->xs1->getIndex());
		$this->assertInstanceOf('XSIndex', $this->xs2->index);
	}

	public function testGetSearch()
	{
		$this->assertInstanceOf('XSSearch', $this->xs1->getSearch());
		$this->assertInstanceOf('XSSearch', $this->xs2->search);
	}

	public function testGetFieldId()
	{
		$xs3 = new XS("[pid]\ntype=id");
		$f = $xs3->getFieldId();
		$this->assertEquals('pid', $f->name);
		$this->assertEquals(XSFieldMeta::TYPE_ID, $f->type);
		$this->assertTrue($f->isBoolIndex());
		$this->assertTrue($f->hasIndexSelf());
		$this->assertFalse($f->hasIndexMixed());
		$this->assertEquals(1, $f->weight);
		$this->assertTrue($f->hasCustomTokenizer());
		$this->assertInstanceOf('XSTokenizerFull', $f->getCustomTokenizer());
		$this->assertTrue($f->isSpeical());
		$this->assertEquals(0, $f->vno);
	}

	public function testGetFieldTitle()
	{
		$xs3 = new XS("[pid]\ntype=id");
		$this->assertFalse($xs3->getFieldTitle());

		// xs1
		$f = $this->xs1->getFieldTitle();
		$this->assertEquals('subject', $f->name);
		$this->assertEquals(XSFieldMeta::TYPE_TITLE, $f->type);
		$this->assertFalse($f->isBoolIndex());
		$this->assertTrue($f->hasIndexSelf());
		$this->assertTrue($f->hasIndexMixed());
		$this->assertEquals(5, $f->weight);
		$this->assertFalse($f->hasCustomTokenizer());
		$this->assertTrue($f->isSpeical());
		$this->assertTrue($f->withPos());
		$this->assertFalse($f->isNumeric());

		// xs2
		$f = $this->xs2->getFieldTitle();
		$this->assertEquals('subject', $f->name);
		$this->assertEquals(XSFieldMeta::TYPE_TITLE, $f->type);
		$this->assertFalse($f->isBoolIndex());
		$this->assertTrue($f->hasIndexSelf());
		$this->assertFalse($f->hasIndexMixed());
		$this->assertEquals(3, $f->weight);
		$this->assertFalse($f->hasCustomTokenizer());
		$this->assertTrue($f->isSpeical());
		$this->assertFalse($f->withPos());
		$this->assertFalse($f->isNumeric());
	}

	public function testGetFieldBody()
	{
		$xs3 = new XS("[pid]\ntype=id");
		$this->assertFalse($xs3->getFieldBody());

		// xs1
		$f = $this->xs1->getFieldBody();
		$this->assertEquals('message', $f->name);
		$this->assertEquals(XSFieldMeta::TYPE_BODY, $f->type);
		$this->assertFalse($f->isBoolIndex());
		$this->assertTrue($f->hasIndexSelf());
		$this->assertFalse($f->hasIndexMixed());
		$this->assertEquals(1, $f->weight);
		$this->assertEquals(300, $f->cutlen);
		$this->assertFalse($f->hasCustomTokenizer());
		$this->assertTrue($f->isSpeical());
		$this->assertTrue($f->withPos());
		$this->assertFalse($f->isNumeric());
		$this->assertEquals(XSFieldScheme::MIXED_VNO, $f->vno);

		// xs2
		$f = $this->xs2->getFieldBody();
		$this->assertEquals('message', $f->name);
		$this->assertEquals(XSFieldMeta::TYPE_BODY, $f->type);
		$this->assertFalse($f->isBoolIndex());
		$this->assertTrue($f->hasIndexSelf());
		$this->assertFalse($f->hasIndexMixed());
		$this->assertEquals(1, $f->weight);
		$this->assertEquals(100, $f->cutlen);
		$this->assertFalse($f->hasCustomTokenizer());
		$this->assertTrue($f->isSpeical());
		$this->assertTrue($f->withPos());
		$this->assertFalse($f->isNumeric());
		$this->assertEquals(XSFieldScheme::MIXED_VNO, $f->vno);
	}

	public function testGetField()
	{
		$this->expectException(XSException::class);
		$this->assertEquals('chrono', $this->xs1->getField('chrono')->name);
		$this->xs1->getField('not-exists');
	}

	public function testGetAllFields()
	{
		$this->assertEquals(7, count($this->xs1->getAllFields()));
		$this->assertArrayHasKey('pid', $this->xs1->getAllFields());
		$this->assertArrayNotHasKey('pid2', $this->xs1->getAllFields());
	}

	public function testConvert()
	{
		$str = 'english string only';
		$this->assertEquals(XS::convert($str, 'GBK', 'UTF-8'), $str);

		$str = 'english 和中文混合';
		$str1 = XS::convert($str, 'GBK', 'UTF-8');
		$this->assertEquals(XS::convert($str1, 'UTF-8', 'GBK'), $str);
	}

	public function testLastXS()
	{
		$lastXS = XS::getLastXS();
		$this->assertEquals($this->xs2, $lastXS);
		$this->assertNotEquals($this->xs1, $lastXS);
	}
}
