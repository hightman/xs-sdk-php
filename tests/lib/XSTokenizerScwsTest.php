<?php
require_once dirname(__FILE__) . '/../../lib/XSTokenizer.class.php';
require_once dirname(__FILE__) . '/../../lib/XSDocument.class.php';

/**
 * Test class for XSTokenizerScws
 * Generated by PHPUnit on 2012-03-31 at 16:32:59.
 */
class XSTokenizerScwsTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var XSTokenizerScws
	 */
	protected $object;

	/** 	 
	 * @var XSDocument
	 */
	protected $doc;

	/**
	 * Create an XS instance first for scws connection
	 */
	public static function setUpBeforeClass(): void
	{
		$xs = new XS(end($GLOBALS['fixIniData']));
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp(): void
	{
		$this->object = new XSTokenizerScws;
		$this->object->setCharset('UTF-8')->setIgnore(true)->setMulti(3);
		$this->doc = new XSDocument;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown(): void
	{
		$this->doc = null;
	}

	public function testSetCharset()
	{
		$text = '全文检索';
		$tk = $this->object;
		$words = $tk->getResult($text);
		$this->assertEquals($words[0]['word'], $text);

		$gbk = XS::convert($text, 'GBK', 'UTF-8');
		$tk->setCharset('GBK');
		$words = $tk->getResult($gbk);
		$this->assertEquals($words[0]['word'], $gbk);
	}

	public function testSetIgnore()
	{
		$text = '全文，检索';
		$tk = $this->object;
		$words = $tk->setIgnore(true)->getResult($text);
		$this->assertEquals(count($words), 2);

		$words = $tk->setIgnore(false)->getResult($text);
		$this->assertEquals(count($words), 3);
	}

	public function testSetMulti()
	{
		$text = '全文检索';
		$tk = $this->object;
		$word1 = $tk->setMulti(SCWS_MULTI_NONE)->getResult($text);
		$this->assertEquals(count($word1), 1);

		$word2 = $tk->setMulti(SCWS_MULTI_SHORT)->getResult($text);
		$this->assertEquals(count($word2), 3);

		$word3 = $tk->setMulti(SCWS_MULTI_SHORT | SCWS_MULTI_ZMAIN)->getResult($text);
		$this->assertEquals(count($word3), 6);

		$word4 = $tk->setMulti(15)->getResult($text);
		$this->assertEquals(count($word4), 7);
	}

	public function testGetVersion()
	{
		$version = $this->object->getVersion();
		$this->assertRegExp('/^1\.[0-9]+\.[0-9]+(?:\-dev)?$/', $version);
	}

	public function testGetResult()
	{
		
	}

	public function testGetTops()
	{
		$text = '迅搜(xunsearch)是优秀的开源全文检索解决方案';
		$tops = $this->object->getTops($text, 4);
		$this->assertEquals(4, count($tops));
		$this->assertEquals('全文检索', $tops[0]['word']);
		$this->assertEquals('开源', $tops[1]['word']);
	}

	public function testHasWord()
	{
		$text = '迅搜(xunsearch)是优秀的开源全文检索解决方案';
		$tk = $this->object;
		$this->assertTrue($tk->hasWord($text, 'ag,v'));
		$this->assertFalse($tk->hasWord('迅搜', '~ag,v'));
	}

	/**
	 * @dataProvider provider
	 */
	public function testGetTokens($res, $str)
	{
		$this->assertEquals($res, $this->object->getTokens($str, $this->doc));
	}

	public function provider()
	{
		return array(
			array(
				array('明月', '松', '松间', '间照', '照', '清泉', '石', '上流'),
				'明月松间照，清泉石上流'
			),
			array(
				array('我是', 'hightman', '我会', '用', 'Q币', '去', '去买', '买', 'T恤'),
				'我是hightman，我会用Q币去买T恤'
			),
		);
	}
}

